package Calculator;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

public class _4 extends JFrame implements ActionListener, java.awt.event.KeyListener {

	JPanel panCen, panBot, panMain, panTop, panCen2, panExtra;
	JTextArea text;
	JLabel label;
	int count = 0;
	String[] st = new String[100];
	JButton[] ButtonsMain = new JButton[30];
	JButton[] ButtonsDisplay = new JButton[6];
	String str2 = "";
	String str = "";

	Font myFont1 = new Font("Edda ", Font.BOLD, 55);
	Font myFont2 = new Font("Edda  ", Font.BOLD, 20);
	Font myFont3 = new Font("Edda  ", Font.ITALIC, 30);

	String buttonsName[] = { "M", "MS", "M-", "M+", "MR", "MC", "%", "C", "CE", "<=", "1", "2", "3", "+", "4", "5", "6",
			"-", "7", "8", "9", "*", ".", "0", ",", "/", "(", "sqrt(", ")", "=" };

	double a = 0, b = 0, c = 0, d = 0, e = 0;

	public _4() {

		// create pannel Main
		panMain = new JPanel();
		panMain.setLayout(new BorderLayout());

		// create pannel center
		panCen = new JPanel();
		panCen.setLayout(new GridLayout(1, 1));

		// create pannel Bot
		panBot = new JPanel();
		panBot.setLayout(new GridLayout(6, 6));
		// create pannel Top
		panTop = new JPanel();
		panTop.setLayout(new GridLayout(1, 1));

		// create pannel cen2
		panCen2 = new JPanel();
		panCen2.setLayout(new GridLayout(1, 5));

		// creat pannel extra
		panExtra = new JPanel();
		panExtra.setLayout(new BorderLayout());

		panExtra.add(panCen);
		panExtra.add(panCen2);
		this.getContentPane().setBackground(Color.black);
		panMain.setBorder(BorderFactory.createLineBorder(Color.black, 2));
		panCen.setBorder(BorderFactory.createLineBorder(Color.black, 2));
		panTop.setBorder(BorderFactory.createLineBorder(Color.red, 1));

		text = new JTextArea();
		text.setWrapStyleWord(true);
		text.setLineWrap(true);
		panBot.setBackground(Color.gray);
		text.setEditable(false);
		panCen.add(text);
		label = new JLabel("CASIO");
		panTop.add(label);
		label.setHorizontalAlignment(JLabel.CENTER);

		for (int i = 0; i < 6; i++) {
			ButtonsDisplay[i] = new JButton(buttonsName[i]);
			ButtonsDisplay[i].addActionListener(this);
			ButtonsDisplay[i].addKeyListener(this);
			ButtonsDisplay[i].setBackground(Color.white);
			panCen2.add(ButtonsDisplay[i]);

		}

		for (int i = 6; i < 30; i++) {
			ButtonsMain[i] = new JButton(buttonsName[i]);
			ButtonsMain[i].addActionListener(this);
			ButtonsMain[i].addKeyListener(this);
			ButtonsMain[i].setFont(myFont2);
			panBot.add(ButtonsMain[i]);
			ButtonsMain[i].setBackground(Color.white);
		}

		panMain.addKeyListener(this);

		label.setForeground(Color.RED);// set font color of text
		label.setFont(myFont1);// set font off text
		panMain.add(panBot, BorderLayout.SOUTH);
		panMain.add(panTop, BorderLayout.NORTH);
		panMain.add(panExtra, BorderLayout.CENTER);
		panExtra.add(panCen, BorderLayout.NORTH);
		panExtra.add(panCen2, BorderLayout.SOUTH);
		panCen.setPreferredSize(new Dimension(100, 100));
		panBot.setPreferredSize(new Dimension(325, 325));
		panTop.setPreferredSize(new Dimension(50, 50));
		panCen2.setPreferredSize(new Dimension(30, 30));

		this.setFocusable(true);
		this.setFocusCycleRoot(true);
		this.addKeyListener(this);
		this.add(panMain);
		this.setSize(350, 550);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setVisible(true);
		this.setTitle("CALCULATOR");
	}

	public static void main(String[] args) {
		new _4();

	}

	public void actionPerformed(ActionEvent e) {

		for (int i = 10; i < 29; i++) {
			if (e.getSource() == ButtonsMain[i]) {
				text.setText(str += (buttonsName[i]));
				text.setFont(myFont3);// set font off text);
			}
		}

		if (e.getSource() == ButtonsMain[29]) { // Addition, Subtraction, Multiplication, Division

			if (str.indexOf("+") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("+")));
				b += Double.parseDouble(str.substring(str.indexOf("+") + 1, str.length()));
				text.setText(String.valueOf(a + b)); // Show result
				str = String.valueOf(a + b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("-") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("-")));
				b += Double.parseDouble(str.substring(str.indexOf("-") + 1, str.length()));
				text.setText(String.valueOf(a - b)); // Show result
				str = String.valueOf(a - b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("*") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("*")));
				b += Double.parseDouble(str.substring(str.indexOf("*") + 1, str.length()));
				text.setText(String.valueOf(a * b)); // Show result
				str = String.valueOf(a * b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("/") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("/")));
				b += Double.parseDouble(str.substring(str.indexOf("/") + 1, str.length()));
				text.setText(String.valueOf(a / b)); // Show result
				str = String.valueOf(a / b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("%") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("%")));
				b += Double.parseDouble(str.substring(str.indexOf("%") + 1, str.length()));
				text.setText(String.valueOf(a % b)); // Show result
				str = String.valueOf(a % b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}

			if (str.indexOf("sqrt(") != -1) {
				a += Double.parseDouble(
						text.getText().substring(text.getText().indexOf("(") + 1, text.getText().indexOf(")")));
				text.setText(String.valueOf(Math.sqrt(a))); // Show resul

				str = String.valueOf(Math.sqrt(a));
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
		}

		if (e.getSource() == ButtonsMain[6]) {
			text.setText(str += "%");
			text.setFont(myFont3);
		}

		if (e.getSource() == ButtonsMain[9]) {
			String string = text.getText();
			text.setText("");
			for (int i = 0; i < string.length() - 1; i++) {
				text.setText(text.getText() + string.charAt(i));
				str = "";
			}
		}

		if ((e.getSource() == ButtonsMain[8]) || (e.getSource() == ButtonsMain[7])) {
			str = "";
			text.setText(str);
		}

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case 10:
			if (str.indexOf("+") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("+")));
				b += Double.parseDouble(str.substring(str.indexOf("+") + 1, str.length()));
				text.setText(String.valueOf(a + b)); // Show result
				str = String.valueOf(a + b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("-") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("-")));
				b += Double.parseDouble(str.substring(str.indexOf("-") + 1, str.length()));
				text.setText(String.valueOf(a - b)); // Show result
				str = String.valueOf(a - b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("*") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("*")));
				b += Double.parseDouble(str.substring(str.indexOf("*") + 1, str.length()));
				text.setText(String.valueOf(a * b)); // Show result
				str = String.valueOf(a * b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("/") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("/")));
				b += Double.parseDouble(str.substring(str.indexOf("/") + 1, str.length()));
				text.setText(String.valueOf(a / b)); // Show result
				str = String.valueOf(a / b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}
			if (str.indexOf("%") != -1) {
				a += Double.parseDouble(str.substring(0, str.indexOf("%")));
				b += Double.parseDouble(str.substring(str.indexOf("%") + 1, str.length()));
				text.setText(String.valueOf(a % b)); // Show result
				str = String.valueOf(a % b);
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}

			if (str.indexOf("sqrt(") != -1) {
				a += Double.parseDouble(
						text.getText().substring(text.getText().indexOf("(") + 1, text.getText().indexOf(")")));
				text.setText(String.valueOf(Math.sqrt(a))); // Show resul

				str = String.valueOf(Math.sqrt(a));
				a = 0;
				b = 0; // Restart show & vaiable a, b
			}

			break;
		case 8:

			String string = text.getText();
			text.setText("");
			for (int i = 0; i < string.length() - 1; i++) {
				text.setText(text.getText() + string.charAt(i));
				str = "";
			}
			break;
		case 127:
			str = "";
			text.setText(str);
			break;
		case 97:
			text.setText(str += buttonsName[10]);
			text.setFont(myFont3);// set font off text);
			break;
		case 98:
			text.setText(str += buttonsName[11]);
			text.setFont(myFont3);// set font off text);
			break;
		case 99:
			text.setText(str += buttonsName[12]);
			text.setFont(myFont3);// set font off text);
			break;
		case 100:
			text.setText(str += buttonsName[14]);
			text.setFont(myFont3);// set font off text);
			break;
		case 101:
			text.setText(str += buttonsName[15]);
			text.setFont(myFont3);// set font off text);
			break;
		case 102:
			text.setText(str += buttonsName[16]);
			text.setFont(myFont3);// set font off text);
			break;
		case 103:
			text.setText(str += buttonsName[18]);
			text.setFont(myFont3);// set font off text);
			break;
		case 104:
			text.setText(str += buttonsName[19]);
			text.setFont(myFont3);// set font off text);
			break;
		case 105:
			text.setText(str += buttonsName[20]);
			text.setFont(myFont3);// set font off text);
			break;
		case 96:
			text.setText(str += (buttonsName[23]));
			text.setFont(myFont3);// set font off text);
			break;
		case 107:
			text.setText(str += (buttonsName[13]));
			text.setFont(myFont3);// set font off text);

			break;
		case 109:
			text.setText(str += (buttonsName[17]));
			text.setFont(myFont3);// set font off text);

			break;
		case 106:
			text.setText(str += (buttonsName[21]));
			text.setFont(myFont3);// set font off text);

			break;
		case 111:
			text.setText(str += (buttonsName[25]));
			text.setFont(myFont3);// set font off text);

			break;

		}

	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}
	
	// Phương thức này dùng để kiểm tra dấu (trừ dấu ".")
		public boolean checkMarkOther(String a) {
			return (a == "+") || (a == "-") || (a == "*") || (a == "/");
		}

		/*
		 * Đây là phiên bản đầu tiên của event calculator sử dụng mảng để lưu trữ, xử lí
		 * các event mà người dùng thao tác Về sau có phiên bản thứ 2 dùng cách xử lí
		 * chuỗi tiện lợi hơn (gợi ý của anh Tiến) ==> nhớ Phần tử đầu tiên của mảng,
		 * chuỗi,... bắt đầu từ [0]
		 */
		public static boolean checkMark(String a) {
			return (a == "+") || (a == "-") || (a == "*") || (a == "/") || (a == ".");
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub
			double a;
			/*
			 * Khi bạn làm biếng và không muốn tạo event thủ công các nút từ 0->9 Sử dụng
			 * hàm đổi kiểu int -> String Ta chỉ có thể equal kiểu String với nhau, nhưng
			 * String lại không cho phép chạy trong loop Lợi dụng việc kiểu int có để chạy
			 * trong loop, khắc phục được nhược điểm của String Mối liên hệ của chúng là hàm
			 * <valueOf()>
			 */
			for (int i = 0; i <= 9; i++) {
				if (e.getActionCommand().equals(String.valueOf(i))) {
					st[i] = "" + String.valueOf(i);
					text.setText(text.getText() + i);
				}
			}
			/*
			 * Dấu cộng , trừ, nhân, chia, "." không thể tồn tại 2 dấu đứng sát nhau "+"&"-"
			 * có thể đứng đầu của chuỗi ( "*", "/" thì không) Dấu "." sẽ đi cụ thể trogn
			 * phần dấu "."
			 */
			if (e.getActionCommand().equals("+")) {
				// Khi nút "+" được nhấn,
				// kiểm tra xem kí tự trước nó có phải là "dấu" không (kí tự cuối cùng của
				// chuỗi)
				if (!checkMark(st[count+1])) { // nếu không phải là "dấu"
					st[count + 1] = "" + "+";// lưu trong mảng để xử lí
					count++;
					text.setText(text.getText() + "+");// thêm dấu "+" vào cuối
				} else { // là "dấu" thì xóa dấu trước đó và thêm dấu mới vào
					text.setText(text.getText().substring(0, text.getText().length() - 1) + "+");
					st[count + 1] = "" + "+";// lưu trong mảng để xử lí
				}
			}
			// Tương tự dấu cộng các dấu còn lại hoạt động y hệt
			// Dấu trừ có khác một tí là khi nhấn 2 lần nó sẽ thành dấu +
			if (e.getActionCommand().equals("-")) {
				if (!checkMark(st[count+1])) {
					st[count + 1] = "" + "-";
					count++;
					text.setText(text.getText() + "-");
				} else {
					if (st[count] == "-") {// nếu phía trước là "-" thì đổi thành "+"
						text.setText(text.getText().substring(0, text.getText().length() - 1) + "+");
						st[count + 1] = "" + "+";
					} else {
						text.setText(text.getText().substring(0, text.getText().length() - 1) + "-");
						st[count + 1] = "" + "-";
					}
				}
			}
			// Dấu nhân và chia không thể đứng ở đầu tiên có nghĩa là không thể đứng ở vị
			// trí thứ 1
			if (e.getActionCommand().equals("*")) {
				if (!(count == 1)) {// khác vị trí 1 mới nhận lệnh, (count là vị trí trong mảng)

					if (!checkMark(st[count+1])) {
						st[count + 1] = "" + "*";
						count++;
						text.setText(text.getText() + "*");
					} else {

						text.setText(text.getText().substring(0, text.getText().length() - 1) + "*");
						st[count + 1] = "" + "*";

					}
				}
			}
			// Tương tự dấu Nhân
			if (e.getActionCommand().equals("/")) {
				if (!(count == 1)) {
					if (!checkMark(st[count+1])) {
						st[count + 1] = "" + "/";
						count++;
						text.setText(text.getText() + "/");
					} else {
						text.setText(text.getText().substring(0, text.getText().length() - 1) + "/");
						st[count + 1] = "" + "/";
					}
				}
			}
			// xoa 1 ki tu, ta sử dụng hàm <Substring()>(hàm này trả về chuỗi con từ chuỗi
			// cha ta truyền cho nó)
			// nếu muốn xóa kí tự cuối thì ta chỉ cần lấy ra chuỗi con từ đầu => kí tự kề
			// cuối
			if (e.getActionCommand().equals("Del")) {
				if (!text.getText().equals("")) {

					text.setText(text.getText().substring(0, text.getText().length() - 1));
					// nhớ xóa trong mảng
					count++;
					st[count] = "";
				}
			}
			// xoa toan bo ki tu
			if (e.getActionCommand().equals("AC")) {
				text.setText("");
				for (int i = 1; i < count; i++) {
					st[i] = "";
				}
				count = 0;// nhớ đặc count về 1

			}
			/*
			 * Dấu "." cần thỏa mãng 1. 1 kí tự phía trước nó là 1 con số 2. con số đó không
			 * được có dấu chấm nào vd: -2.908 -> true 2.9.08 -> false +. -> false Khi xử lí
			 * bằng chuỗi chúng ta sẽ sử dụng hàm indexOf(), vẫn dùng nguyên lí tương tự như
			 * trên
			 */

			if (e.getActionCommand().equals(".")) {
//				st[1] = "+";// setup để không lỗi, vì điều kiện để nhận ra 1 con số là trước "dấu"
				boolean check = true;// mặc định là số trước nó không có dấu "."

				if (!checkMark(st[count+1 ])) {// kiểm tra kí tự đầu nếu khác "dấu" thì thực hiện if
					while (!checkMarkOther(st[count ])) { // while chạy đến khi nào nó gặp 1 "dấu", đi từ cuối về đầu

						if (st[count] == ".") { // kiểm tra phía trước đã có đấu "." chưa, nếu có đánh dấu là sai và thoát
												// loop
							check = false;
							break;
						}
						count--;//
					}
					if (check) { // thỏa đk thì in dấu "."
						text.setText(text.getText() + ".");
						st[count] = ".";
						count++;
					}

				}
			}
			// sửa lỗi khi bạn nhấn dấu "+","-" và thay thế nó bằng dấu "*" or "/" đầu tiên,
			// thử cmt lại và cảm nhận nhé!
			if (text.getText().equals("*") || text.getText().equals("/")) {
				text.setText("");
				st[count] = "";
				count--;
			}
			// hàm này sử lí trong class ActionCalculator, có chú thích cụ thể
			if (e.getActionCommand().equals("=")) {
				// kiểm tra kí tự cuối cùng nếu không phải là dấu thì thực hiện tính toán
				if (!checkMark(text.getText().substring(text.getText().length() - 1))) {
					// kiểm tra dấu // đoạn dài ngoằng này chỉ để lấy ra kí tự cuối cùng //
					text.setText("" + result(text.getText()));// in kết quả
				}
			}

		}
		// kiem tra dau

		// tao mang toi uu,
		// VD "27+3333*49" => ["27","+3333","*","49"]
		public static ArrayList<String> createOptimalStr(String st) {
			ArrayList<String> opStr = new ArrayList<String>();
			int countNext = getLocalMark(st);// Tìm vị trí dấu đầu tiên, trả về giá trị khác vị trí đầu tiên
			while (countNext != -1) {// khi countNext = -1 có nghĩa là không còn "dâu" nào trong chuỗi => dừng lặp
				if (checkPlusMinus(countNext, st)) {// Nếu "dấu đó là "+" or "-" thì
					opStr.add(st.substring(0, countNext));// cắt số trước "dấu" luu vào mảng kết quả
					st = st.substring(countNext);// tạo chuỗi mới đã xóa phần tử đã cắt
				} else {// nếu dấu là "*" or "/" thì
					opStr.add(st.substring(0, countNext)); // cắt số trước "dấu" luu vào mảng kết quả
					opStr.add(st.substring(countNext, countNext + 1));// cắt "dấu" lưu vào mảng kết quả
					st = st.substring(countNext + 1); // tạo chuỗi mới đã xóa phần tử đã cắt
				}
				countNext = getLocalMark(st);// tìm lại vị trí countNext cho chuỗi mới xóa các phần tử đã cắt
			}
			opStr.add(st);// khi hết "dấu" => countNext =-1 => vòng while đóng lại
			// => thừa 1 chuỗi số cuối cùng chưa lưu vào kết quả, lưu dãy số đó vào mảng kết
			// quả
			return opStr;
		}

		private static boolean checkPlusMinus(int countNext, String st) {
			// Lấy "dấu" đó ra bằng hàm Substring và kiểm tra nó có phải dấu "+" or "-"
			// không,
			String s = st.substring(countNext, countNext + 1);
			return s.equals("+") || s.equals("-");
		}

		private static int getLocalMark(String st) {
			// Kiểm tra vị trí của các "dấu" trong chuỗi,
			// trả về kí tự dấu đầu tiên tính từ vị trí thứ 1 trở đi(nghĩa là ta không xét
			// vị trí đầu tiên)
			String[] a = { "+", "-", "*", "/" };
			int value = st.length();
			// VD "27+3333*49" trả về 2, "-27+3333*49" trả về 2, không tính kí tự đầu tiên
			// khi kiểm tra đấu
			for (int i = 0; i < 4; i++) {
				if ((value > st.indexOf(a[i], 1)) && (st.indexOf(a[i], 1) != -1)) {
					value = st.indexOf(a[i], 1);
				}
				// điều kiện tối quan trọng khi không còn "dấu" nào nữa thì trả về -1,
				// đây là dk để kết thúc vòng while ở trên <createOptimalStr(String st)>
				if ((st.indexOf(a[0], 1) == -1) && (st.indexOf(a[1], 1) == -1) && (st.indexOf(a[2], 1) == -1)
						&& (st.indexOf(a[3], 1) == -1)) {
					value = -1;
				}
			}
			return value;
		}

		public static double result(String st) {
			double sum = 0;
			ArrayList<String> opStr = new ArrayList<String>();
			ArrayList<Double> R = new ArrayList<Double>();
			opStr = createOptimalStr(st);
			/*
			 * Kiểm tra các dấu "*" or "/" trong arraylist nếu gặp tính tích or thương của 2
			 * số gần kề "dấu" rồi đưa lên array kết quả (R)
			 */

			for (int i = 0; i < opStr.size(); i++) {
				// Tích
				if (opStr.get(i).equals("*")) {
					R.add(Double.parseDouble(opStr.get(i - 1)) * Double.parseDouble(opStr.get(i + 1)));
					opStr.set(i, "0");
					opStr.set(i - 1, "0");
					opStr.set(i + 1, "0");
				}
				// Thương
				if (opStr.get(i).equals("/")) {
					R.add(Double.parseDouble(opStr.get(i - 1)) / Double.parseDouble(opStr.get(i + 1)));
					opStr.set(i, "0");
					opStr.set(i - 1, "0");
					opStr.set(i + 1, "0");
				}
				// Đưa hết tất cả các phần từ còn lại trong Array(opStr) lên Array kết quả (r)
				R.add(Double.parseDouble(opStr.get(i)));
				// Tính tổng Array kết quả (R);
				sum += R.get(i);
			}

//				System.out.println(R);
			return sum;

		}
}
