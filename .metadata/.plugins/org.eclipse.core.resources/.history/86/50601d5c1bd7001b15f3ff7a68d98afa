package MyPaint;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;

public class Rectangle extends AShape {
	private int width;
	private int height;
	private int x;
	private int y;

	public Rectangle(int x, int y, Color color, BasicStroke stroke) {
		super(x, y, color, stroke);
		width = 2;
		height = 1;
		// TODO Auto-generated constructor stub
	}

	@Override
	public void setSecondPoint(int x, int y) {
		// TODO Auto-generated method stub
		width = Math.abs(location.x - x);
		height = Math.abs(location.y - y);
		this.x = Math.min(location.x, x);
		this.y = Math.min(location.y, y);
	}

	@Override
	public void draw(Graphics2D g) {
		g.setColor(color);
		g.setStroke(stroke);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g.drawRect(x, y, width, height);
	}

	@Override
	public boolean contains(Point p) {
		// TODO Auto-generated method stub
		if (x < p.x && x + width > p.x && y < p.y && y + height > p.y) {
			return true;
		}
		return false;
	}

	@Override
	public void fill(Graphics2D g) {
		// TODO Auto-generated method stub
		g.setColor(color);
		g.fillRect(x, y, width, height);
	}

	@Override
	public int perimeter() {
		// TODO Auto-generated method stub
		return (int) (width + height) / 2;
	}

	@Override
	public boolean lyingOn(Point p) {
		// TODO Auto-generated method stub
		if (x != p.x && x + width != p.x && y != p.y && y + height != p.y) {
			return false;
		}
		return true;
	}

	@Override
	public void setCommand(StatusBar statusBar) {
		// TODO Auto-generated method stub

		statusBar.command1.setText(statusBar.command1.getText() + "\n\n" + "-Rectangle: ||center(" + center().x + ";"
				+ center().y + ")" + " ||width: " + width + " ||height: " + height + " ||perimeter: " + perimeter()
				+ " ||area: " + area() + " ~~Finish");
	}

	@Override
	public void move( Point end) {
		// TODO Auto-generated method stub
		x = end.x - width / 2;
		y = end.y - height / 2;


	}

	@Override
	public int area() {
		// TODO Auto-generated method stub
		return width * height;
	}

	@Override
	public Point center() {
		// TODO Auto-generated method stub
		return new Point(location.x + width / 2, location.y + height / 2);
	}

}
