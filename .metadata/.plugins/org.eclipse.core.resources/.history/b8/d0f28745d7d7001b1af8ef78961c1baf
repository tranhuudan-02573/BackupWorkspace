package MyPaint;

package SelectObj;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Ellipse2D.Double;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;



public class SelectObj {
	static int dem;

    public SelectObj() {
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        final DrawPanel drawPanel = new DrawPanel();

        drawPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                super.mouseClicked(me);
                for (Ball b : drawPanel.getBalls()) {//iterate through each ball
                	System.out.println(drawPanel.getHeight()+" w :  "+drawPanel.getWidth());
                	System.out.println("contains "+ !(b.getBounds().contains(new Rectangle(me.getPoint().x-5,me.getPoint().y-5,10,10))  )+ " "+ dem++  );
                	System.out.println("intersects"+ (b.getBounds().intersects(new Rectangle(me.getPoint().x-5,me.getPoint().y-5,10,10))  )+ " "+ dem++  );
                	if ( (b.getBoundsEllip().intersects(new Rectangle(me.getPoint().x-5,me.getPoint().y-5,10,10))) && !(b.getBoundsEllip().contains(new Rectangle(me.getPoint().x-5,me.getPoint().y-5,10,10))  )  ) {//get the ball bounds and check if mouse click was within its bounds
                		
                		//                		contains(me.getPoint())
                		if (!b.isSelected()) {// check if the ball is selected or not
                            b.setSelected(true);
                        } else {
                            b.setSelected(false);
                        }
                        drawPanel.repaint();//so ball color change will be shown
                    }
                }

            }
        });

        JPanel controlPanel = new JPanel();

        JButton createBallButton = new JButton("Add ball");
        createBallButton.addActionListener(new ActionListener() {
            Random rand = new Random();
            private int counter = 1;

            public void actionPerformed(ActionEvent e) {

                int ballRadius = 100;
                int x = rand.nextInt(drawPanel.getWidth());
                int y = rand.nextInt(drawPanel.getHeight());

                //check that we dont go offscreen by subtarcting its radius unless its x and y are not bigger than radius
                if (y > ballRadius) {
                    y -= ballRadius;
                }
                if (x > ballRadius) {
                    x -= ballRadius;
                }

                drawPanel.addBall(new Ball(x, y, ballRadius, counter));//add ball to panel to be drawn
                counter++;//increase the ball number
            }
        });

        final JTextArea jtf = new JTextArea(5, 10);
        jtf.setEditable(false);
        JButton printSelectedBallButton = new JButton("Print selected balls");
        printSelectedBallButton.addActionListener(new ActionListener() {
            Random rand = new Random();
            private int counter = 1;

            public void actionPerformed(ActionEvent e) {
                jtf.setText("");
                for (Ball b : drawPanel.getBalls()) {
                    if (b.isSelected()) {
                        jtf.append("Selected: " + b.getNumber() + "\n");
                    }
                }

            }
        });

        controlPanel.add(createBallButton);
        controlPanel.add(printSelectedBallButton);
        JScrollPane jsp = new JScrollPane(jtf);
        controlPanel.add(jsp);

        frame.add(drawPanel);
        frame.add(controlPanel, BorderLayout.SOUTH);

        frame.pack();
        frame.setVisible(true);

    }

    public static void main(String args[]) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SelectObj();
            }
        });
    }
}

class DrawPanel extends JPanel {

    ArrayList<Ball> balls = new ArrayList<>();

    public void addBall(Ball b) {
        balls.add(b);
        repaint();
    }

    public ArrayList<Ball> getBalls() {
        return balls;
    }

    @Override
    protected void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs);
//        Ellipse2D
        Graphics2D g2d = (Graphics2D) grphcs;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        for (Ball ball : balls) {
            ball.draw(g2d);
            if ( ball.isSelected()) {
            	ball.drawSelect(g2d);
            }
        }
//        g2d.drawRect(0, 0, 50, 50);
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(300, 300);
    }
    
}

class Ball {

    private Color color;
    private int x, y;
    private int diameter;
    private final int number;
    private boolean selected;

    Ball(int x, int y, int radius, int counter) {
        this.x = x;
        this.y = y;
        this.diameter = radius;
        this.number = counter;
        selected = false;
        this.color = Color.RED;//default color of unselected ball
    }   
     public void drawSelect(Graphics2D g2d) {
  	  double transX = x+diameter/2-3;
      double transY = y+diameter/2-3;
      Rectangle2D rectCenter = new Rectangle2D.Double(transX,transY, 8, 8);
      Rectangle2D rectTop  = new Rectangle2D.Double(transX, transY- diameter/2, 8, 8);
      Rectangle2D rectBot = new Rectangle2D.Double(transX, transY+ diameter/2, 8, 8);
      Rectangle2D rectLeft = new Rectangle2D.Double(transX- diameter/2, transY, 8, 8);
      Rectangle2D rectRight = new Rectangle2D.Double(transX+ diameter/2,transY, 8, 8);
      g2d.setColor(color.blue);
      g2d.fill(rectCenter);
      g2d.fill(rectTop);
      g2d.fill(rectBot);
      g2d.fill(rectLeft);
      g2d.fill(rectRight);
}

    public void draw(Graphics2D g2d) {
        Color prevColor = g2d.getColor();
        g2d.drawString(number + "", x + diameter, y + diameter);//draw the number of ball
        g2d.setColor(color);
        Ellipse2D ellip = new Ellipse2D.Double(x, y, diameter, diameter);
//        double transX = ellip.getCenterX()-3;
//        double transY = ellip.getCenterY()-3;
//        Rectangle2D rectCenter = new Rectangle2D.Double(transX,transY, 8, 8);
//        Rectangle2D rectTop  = new Rectangle2D.Double(transX, transY- radius/2, 8, 8);
//        Rectangle2D rectBot = new Rectangle2D.Double(transX, transY+ radius/2, 8, 8);
//        Rectangle2D rectLeft = new Rectangle2D.Double(transX- radius/2, transY, 8, 8);
//        Rectangle2D rectRight = new Rectangle2D.Double(transX+ radius/2,transY, 8, 8);

        
        
//        g2d.fillOval(x, y, radius, radius);
//        g2d.drawOval(x, y, radius, radius);
        g2d.draw(ellip);
//        g2d.draw(rectCenter);
//        g2d.setColor(color.blue);
//        g2d.fill(rectCenter);
//        g2d.fill(rectTop);
//        g2d.fill(rectBot);
//        g2d.fill(rectLeft);
//        g2d.fill(rectRight);

//        g2d.setStroke(new BasicStroke(10f) );
//        g2d.draw
//        g2d.drawRect(x, y, radius, radius);
        g2d.setColor(prevColor);
    }
    public Ellipse2D getBoundsEllip() {
    	return new Ellipse2D.Double(x, y, diameter, diameter);
    }
    public Rectangle2D getBounds() {
        return new Rectangle2D.Double(x, y, diameter, diameter).getBounds2D();
    }

       public void setSelected(boolean selected) {
        this.selected = selected;
        if (selected) {
        	       
            color = Color.GREEN;
        } else {
            color = Color.RED;
        }
    }

    boolean isSelected() {
        return selected;
    }

    int getNumber() {
        return number;
    }
}
class RectMouse extends Rectangle{
	Point p ;
	
}
