package SnackGame2;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class GamePlay extends JPanel implements KeyListener, ActionListener {
	private int[] snakeLengthX = new int[750];
	private int[] snakeLengthY = new int[750];
	private boolean right = false;
	private boolean left = false;
	private boolean up = false;
	private boolean down = false;
	private ImageIcon titleImage, downMouth, upMouth, snakeImage, leftMouth, rightMouth, enemyImage;
	private Timer timer;
	private int delay = 100;
	private int lengthOfSnake = 3;
	private int moves = 0;
	private Random random = new Random();
	private int Xpos = random.nextInt(34);
	private int Ypos = random.nextInt(23);
	private int[] enemyXpos = { 25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450,
			475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850 };
	private int[] enemyYpos = { 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500,
			525, 550, 575, 600, 625 };
	private int scores = 0;

	public GamePlay() {
		// TODO Auto-generated constructor stub
		addKeyListener(this);
		setFocusable(true);
		setFocusCycleRoot(true);
		timer = new Timer(delay, this);
		timer.start();
		if (moves == 0) {
			snakeLengthX[0] = 100;
			snakeLengthX[1] = 50;
			snakeLengthX[2] = 75;
			snakeLengthY[0] = 100;
			snakeLengthY[1] = 100;
			snakeLengthY[2] = 100;

		}
	}

	@Override
	public void paint(Graphics g) {
		// TODO Auto-generated method stub
		super.paint(g);
	
		// border of title image
		g.setColor(Color.white);
		g.drawRect(24, 10, 851, 55);
		titleImage = new ImageIcon("./src/SnackGame2/snaketitle.jpg");
		titleImage.paintIcon(this, g, 25, 11);
		// border of gamePlay
		g.setColor(Color.white);
		g.drawRect(24, 74, 851, 577);
		g.setColor(Color.BLACK);
		g.fillRect(25, 75, 850, 575);

		// draw the scores
		g.setColor(Color.WHITE);
		g.setFont(new Font("arial", Font.PLAIN, 14));
		g.drawString("Scores: " + scores, 780, 30);
		g.drawString("Length: " + lengthOfSnake, 780, 50);

		rightMouth = new ImageIcon("./src/SnackGame2/rightmouth.png");
		rightMouth.paintIcon(this, g, snakeLengthX[0], snakeLengthY[0]);
		for (int i = 0; i < lengthOfSnake; i++) {
			if (i == 0 && right) {
				rightMouth = new ImageIcon("./src/SnackGame2/rightmouth.png");
				rightMouth.paintIcon(this, g, snakeLengthX[i], snakeLengthY[i]);

			}
			if (i == 0 && left) {
				leftMouth = new ImageIcon("./src/SnackGame2/leftmouth.png");
				leftMouth.paintIcon(this, g, snakeLengthX[i], snakeLengthY[i]);

			}
			if (i == 0 && up) {
				upMouth = new ImageIcon("./src/SnackGame2/upmouth.png");
				upMouth.paintIcon(this, g, snakeLengthX[i], snakeLengthY[i]);

			}
			if (i == 0 && down) {
				downMouth = new ImageIcon("./src/SnackGame2/downmouth.png");
				downMouth.paintIcon(this, g, snakeLengthX[i], snakeLengthY[i]);

			}
			if (i != 0) {
				snakeImage = new ImageIcon("./src/SnackGame2/snakeimage.png");
				snakeImage.paintIcon(this, g, snakeLengthX[i], snakeLengthY[i]);
			}

		}

		enemyImage = new ImageIcon("./src/SnackGame2/enemy.png");
		enemyImage.paintIcon(this, g, enemyXpos[Xpos], enemyYpos[Ypos]);

		if (enemyXpos[Xpos] == snakeLengthX[0] && enemyYpos[Ypos] == snakeLengthY[0]) {
			lengthOfSnake++;
			scores++;
			Xpos = random.nextInt(34);
			Ypos = random.nextInt(23);

		}

		if (gameOver()) {

			right = false;
			left = false;
			up = false;
			down = false;
			g.setColor(Color.white);
			g.setFont(new Font("arial", Font.BOLD, 50));
			g.drawString("Game Over", 300, 300);
			g.setFont(new Font("arial", Font.BOLD, 30));
			g.drawString("Space to RESTART", 350, 340);

		}

		g.dispose();
	}

	public boolean gameOver() {
		for (int j = 1; j < lengthOfSnake; j++) {
			if (snakeLengthX[j] == snakeLengthX[0] && snakeLengthY[j] == snakeLengthY[0]) {
				return true;
			}
		}
		return false;

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		if (!gameOver()) {

			if (right) {
				for (int i = lengthOfSnake - 1; i > -1; i--) {
					snakeLengthY[i + 1] = snakeLengthY[i];
				}
				for (int i = lengthOfSnake; i > -1; i--) {
					if (i == 0) {
						snakeLengthX[i] = snakeLengthX[i] + 25;
					} else {
						snakeLengthX[i] = snakeLengthX[i - 1];
					}
					if (snakeLengthX[i] > 850) {
						snakeLengthX[i] = 25;
					}
				}
				repaint();

			}
			if (left) {
				for (int i = lengthOfSnake - 1; i > -1; i--) {
					snakeLengthY[i + 1] = snakeLengthY[i];
				}
				for (int i = lengthOfSnake; i > -1; i--) {
					if (i == 0) {
						snakeLengthX[i] = snakeLengthX[i] - 25;
					} else {
						snakeLengthX[i] = snakeLengthX[i - 1];
					}
					if (snakeLengthX[i] < 25) {
						snakeLengthX[i] = 850;
					}
				}
				repaint();

			}
			if (up) {
				for (int i = lengthOfSnake - 1; i > -1; i--) {
					snakeLengthX[i + 1] = snakeLengthX[i];
				}
				for (int i = lengthOfSnake; i > -1; i--) {
					if (i == 0) {
						snakeLengthY[i] = snakeLengthY[i] - 25;
					} else {
						snakeLengthY[i] = snakeLengthY[i - 1];
					}
					if (snakeLengthY[i] < 75) {
						snakeLengthY[i] = 625;
					}
				}
				repaint();

			}
			if (down) {
				for (int i = lengthOfSnake - 1; i > -1; i--) {
					snakeLengthX[i + 1] = snakeLengthX[i];
				}
				for (int i = lengthOfSnake; i > -1; i--) {
					if (i == 0) {
						snakeLengthY[i] = snakeLengthY[i] + 25;
					} else {
						snakeLengthY[i] = snakeLengthY[i - 1];
					}
					if (snakeLengthY[i] > 625) {
						snakeLengthY[i] = 75;
					}
				}
				repaint();

			}
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub

		if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
			moves++;
			if (!left) {
				right = true;
			} else {
				right = false;
				left = true;
			}

			up = false;
			down = false;

		}
		if (e.getKeyCode() == KeyEvent.VK_LEFT) {
			moves++;
			if (!right) {
				left = true;
			} else {
				left = false;
				right = true;
			}

			up = false;
			down = false;

		}
		if (e.getKeyCode() == KeyEvent.VK_DOWN) {
			moves++;
			if (!up) {
				down = true;
			} else {
				down = false;
				up = true;
			}

			right = false;
			left = false;

		}
		if (e.getKeyCode() == KeyEvent.VK_UP) {
			moves++;
			if (!down) {
				up = true;
			} else {
				up = false;
				down = true;
			}

			right = false;
			left = false;

		}
		if (e.getKeyCode() == KeyEvent.VK_SPACE) {
			scores = 0;
			moves = 0;
			lengthOfSnake = 3;
			repaint();
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}
}